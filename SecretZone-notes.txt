SAMSUNG devices
---------------

VID: 04E8, PID: 61B6	Samsung M3 Portable

VID: 04E8, PID: 6124	Samsung D3 Station

VID: 04E8, PID: 5F05	Samsung STORY


...

$ qemu-img create -f qcow2 hdd.img 4G

$ qemu-img info hdd.img

...

SZMgr.exe notes
---------------

The first 0x4000 bytes of an .msr file are decrypted using AES with a fixed key
and fixed iv (see deobfuscate.py).

The function at address 0x41a580 transforms the user entered password.

Then the transformed password is searched in the decrypted first 0x4000 bytes.
If the transformed password is present in the decrypted bytes, it means that the
entered password was correct.

Function at 0x41a580 does not use a salt when transforming passwords.

Function at 0x418f00 calls this password transform function (0x41a580).

Reversing the "password transform function" is the real challenging part. It is
not simple to reimplement this function.


November 2017
-------------

Can we somehow use https://github.com/hasherezade/libpeconv/ to reuse this
"password transform function"?

DLL injection seems to be more suitable technique?

Also see https://wiki.winehq.org/Wine_Developer's_Guide/Architecture_Overview
(The EXE file itself is usually mapped at address 0x400000 and up: indeed, most
EXEs have their relocation records stripped which means they must be loaded at
their base address and cannot be loaded at any other address).

Perhaps https://github.com/MarioVilas/winappdbg can be a useful tool here?

Search for "WinAppDbg - Part 4 - Bruteforcing FlareOn 2017 - Challenge 3" on Google.
